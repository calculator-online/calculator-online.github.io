// Generated from Expression.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,10,84,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,
0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
8,3,8,46,8,8,1,9,4,9,49,8,9,11,9,12,9,50,1,9,1,9,5,9,55,8,9,10,9,12,9,58,
9,9,3,9,60,8,9,1,9,1,9,4,9,64,8,9,11,9,12,9,65,3,9,68,8,9,1,10,3,10,71,8,
10,1,10,4,10,74,8,10,11,10,12,10,75,1,11,4,11,79,8,11,11,11,12,11,80,1,11,
1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,10,1,0,
4,2,0,69,69,101,101,1,0,48,57,2,0,43,43,45,45,3,0,9,10,13,13,32,32,90,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,27,1,0,
0,0,5,29,1,0,0,0,7,31,1,0,0,0,9,34,1,0,0,0,11,36,1,0,0,0,13,38,1,0,0,0,15,
40,1,0,0,0,17,42,1,0,0,0,19,67,1,0,0,0,21,70,1,0,0,0,23,78,1,0,0,0,25,26,
5,40,0,0,26,2,1,0,0,0,27,28,5,41,0,0,28,4,1,0,0,0,29,30,5,94,0,0,30,6,1,
0,0,0,31,32,5,42,0,0,32,33,5,42,0,0,33,8,1,0,0,0,34,35,5,43,0,0,35,10,1,
0,0,0,36,37,5,45,0,0,37,12,1,0,0,0,38,39,5,42,0,0,39,14,1,0,0,0,40,41,5,
47,0,0,41,16,1,0,0,0,42,45,3,19,9,0,43,44,7,0,0,0,44,46,3,21,10,0,45,43,
1,0,0,0,45,46,1,0,0,0,46,18,1,0,0,0,47,49,7,1,0,0,48,47,1,0,0,0,49,50,1,
0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,59,1,0,0,0,52,56,5,46,0,0,53,55,7,1,
0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,60,1,0,0,
0,58,56,1,0,0,0,59,52,1,0,0,0,59,60,1,0,0,0,60,68,1,0,0,0,61,63,5,46,0,0,
62,64,7,1,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,
68,1,0,0,0,67,48,1,0,0,0,67,61,1,0,0,0,68,20,1,0,0,0,69,71,7,2,0,0,70,69,
1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,74,7,1,0,0,73,72,1,0,0,0,74,75,1,
0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,22,1,0,0,0,77,79,7,3,0,0,78,77,1,0,
0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,6,11,0,
0,83,24,1,0,0,0,10,0,45,50,56,59,65,67,70,75,80,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ExpressionLexer extends antlr4.Lexer {

    static grammarFileName = "Expression.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "'^'", "'**'", "'+'", "'-'", 
                         "'*'", "'/'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, "NUMBER", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "NUMBER", "SIGNIFICAND", "EXPONENT", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ExpressionLexer.EOF = antlr4.Token.EOF;
ExpressionLexer.T__0 = 1;
ExpressionLexer.T__1 = 2;
ExpressionLexer.T__2 = 3;
ExpressionLexer.T__3 = 4;
ExpressionLexer.T__4 = 5;
ExpressionLexer.T__5 = 6;
ExpressionLexer.T__6 = 7;
ExpressionLexer.T__7 = 8;
ExpressionLexer.NUMBER = 9;
ExpressionLexer.WHITESPACE = 10;



